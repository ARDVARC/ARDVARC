// Generated by gencpp from file ardvarc/Eulers.msg
// DO NOT EDIT!


#ifndef ARDVARC_MESSAGE_EULERS_H
#define ARDVARC_MESSAGE_EULERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ardvarc
{
template <class ContainerAllocator>
struct Eulers_
{
  typedef Eulers_<ContainerAllocator> Type;

  Eulers_()
    : eulers()  {
      eulers.assign(0.0);
  }
  Eulers_(const ContainerAllocator& _alloc)
    : eulers()  {
  (void)_alloc;
      eulers.assign(0.0);
  }



   typedef boost::array<double, 3>  _eulers_type;
  _eulers_type eulers;





  typedef boost::shared_ptr< ::ardvarc::Eulers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardvarc::Eulers_<ContainerAllocator> const> ConstPtr;

}; // struct Eulers_

typedef ::ardvarc::Eulers_<std::allocator<void> > Eulers;

typedef boost::shared_ptr< ::ardvarc::Eulers > EulersPtr;
typedef boost::shared_ptr< ::ardvarc::Eulers const> EulersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardvarc::Eulers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardvarc::Eulers_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ardvarc::Eulers_<ContainerAllocator1> & lhs, const ::ardvarc::Eulers_<ContainerAllocator2> & rhs)
{
  return lhs.eulers == rhs.eulers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ardvarc::Eulers_<ContainerAllocator1> & lhs, const ::ardvarc::Eulers_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ardvarc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ardvarc::Eulers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardvarc::Eulers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardvarc::Eulers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardvarc::Eulers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardvarc::Eulers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardvarc::Eulers_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardvarc::Eulers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed8507d0eb35eb5807ddbfdda3a6a8c9";
  }

  static const char* value(const ::ardvarc::Eulers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed8507d0eb35eb58ULL;
  static const uint64_t static_value2 = 0x07ddbfdda3a6a8c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardvarc::Eulers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardvarc/Eulers";
  }

  static const char* value(const ::ardvarc::Eulers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardvarc::Eulers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] eulers\n"
;
  }

  static const char* value(const ::ardvarc::Eulers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardvarc::Eulers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eulers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Eulers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardvarc::Eulers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardvarc::Eulers_<ContainerAllocator>& v)
  {
    s << indent << "eulers[]" << std::endl;
    for (size_t i = 0; i < v.eulers.size(); ++i)
    {
      s << indent << "  eulers[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eulers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDVARC_MESSAGE_EULERS_H
