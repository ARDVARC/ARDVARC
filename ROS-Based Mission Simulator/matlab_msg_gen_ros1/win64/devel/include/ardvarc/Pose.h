// Generated by gencpp from file ardvarc/Pose.msg
// DO NOT EDIT!


#ifndef ARDVARC_MESSAGE_POSE_H
#define ARDVARC_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ardvarc/Point.h>
#include <ardvarc/Eulers.h>

namespace ardvarc
{
template <class ContainerAllocator>
struct Pose_
{
  typedef Pose_<ContainerAllocator> Type;

  Pose_()
    : position()
    , eulers()  {
    }
  Pose_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , eulers(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ardvarc::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::ardvarc::Eulers_<ContainerAllocator>  _eulers_type;
  _eulers_type eulers;





  typedef boost::shared_ptr< ::ardvarc::Pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardvarc::Pose_<ContainerAllocator> const> ConstPtr;

}; // struct Pose_

typedef ::ardvarc::Pose_<std::allocator<void> > Pose;

typedef boost::shared_ptr< ::ardvarc::Pose > PosePtr;
typedef boost::shared_ptr< ::ardvarc::Pose const> PoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardvarc::Pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardvarc::Pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ardvarc::Pose_<ContainerAllocator1> & lhs, const ::ardvarc::Pose_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.eulers == rhs.eulers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ardvarc::Pose_<ContainerAllocator1> & lhs, const ::ardvarc::Pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ardvarc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ardvarc::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardvarc::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardvarc::Pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardvarc::Pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardvarc::Pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardvarc::Pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardvarc::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf4913fce816b849e78a417b64f894c3";
  }

  static const char* value(const ::ardvarc::Pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf4913fce816b849ULL;
  static const uint64_t static_value2 = 0xe78a417b64f894c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardvarc::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardvarc/Pose";
  }

  static const char* value(const ::ardvarc::Pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardvarc::Pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point position\n"
"Eulers eulers\n"
"================================================================================\n"
"MSG: ardvarc/Point\n"
"float64[3] point\n"
"================================================================================\n"
"MSG: ardvarc/Eulers\n"
"float64[3] eulers\n"
;
  }

  static const char* value(const ::ardvarc::Pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardvarc::Pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.eulers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardvarc::Pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardvarc::Pose_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::ardvarc::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "eulers: ";
    s << std::endl;
    Printer< ::ardvarc::Eulers_<ContainerAllocator> >::stream(s, indent + "  ", v.eulers);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDVARC_MESSAGE_POSE_H
