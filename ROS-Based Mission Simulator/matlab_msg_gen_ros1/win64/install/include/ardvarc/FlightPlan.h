// Generated by gencpp from file ardvarc/FlightPlan.msg
// DO NOT EDIT!


#ifndef ARDVARC_MESSAGE_FLIGHTPLAN_H
#define ARDVARC_MESSAGE_FLIGHTPLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ardvarc/Point.h>
#include <ardvarc/Point.h>

namespace ardvarc
{
template <class ContainerAllocator>
struct FlightPlan_
{
  typedef FlightPlan_<ContainerAllocator> Type;

  FlightPlan_()
    : go_to_center()
    , orbit_radius(0.0)
    , look_at()  {
    }
  FlightPlan_(const ContainerAllocator& _alloc)
    : go_to_center(_alloc)
    , orbit_radius(0.0)
    , look_at(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ardvarc::Point_<ContainerAllocator>  _go_to_center_type;
  _go_to_center_type go_to_center;

   typedef double _orbit_radius_type;
  _orbit_radius_type orbit_radius;

   typedef  ::ardvarc::Point_<ContainerAllocator>  _look_at_type;
  _look_at_type look_at;





  typedef boost::shared_ptr< ::ardvarc::FlightPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardvarc::FlightPlan_<ContainerAllocator> const> ConstPtr;

}; // struct FlightPlan_

typedef ::ardvarc::FlightPlan_<std::allocator<void> > FlightPlan;

typedef boost::shared_ptr< ::ardvarc::FlightPlan > FlightPlanPtr;
typedef boost::shared_ptr< ::ardvarc::FlightPlan const> FlightPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ardvarc::FlightPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ardvarc::FlightPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ardvarc::FlightPlan_<ContainerAllocator1> & lhs, const ::ardvarc::FlightPlan_<ContainerAllocator2> & rhs)
{
  return lhs.go_to_center == rhs.go_to_center &&
    lhs.orbit_radius == rhs.orbit_radius &&
    lhs.look_at == rhs.look_at;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ardvarc::FlightPlan_<ContainerAllocator1> & lhs, const ::ardvarc::FlightPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ardvarc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ardvarc::FlightPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ardvarc::FlightPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardvarc::FlightPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ardvarc::FlightPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardvarc::FlightPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ardvarc::FlightPlan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ardvarc::FlightPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53e79edf12cdb10646bd517040409417";
  }

  static const char* value(const ::ardvarc::FlightPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53e79edf12cdb106ULL;
  static const uint64_t static_value2 = 0x46bd517040409417ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardvarc::FlightPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ardvarc/FlightPlan";
  }

  static const char* value(const ::ardvarc::FlightPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ardvarc::FlightPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point go_to_center\n"
"float64 orbit_radius\n"
"Point look_at\n"
"================================================================================\n"
"MSG: ardvarc/Point\n"
"float64[3] point\n"
;
  }

  static const char* value(const ::ardvarc::FlightPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ardvarc::FlightPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.go_to_center);
      stream.next(m.orbit_radius);
      stream.next(m.look_at);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardvarc::FlightPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ardvarc::FlightPlan_<ContainerAllocator>& v)
  {
    s << indent << "go_to_center: ";
    s << std::endl;
    Printer< ::ardvarc::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.go_to_center);
    s << indent << "orbit_radius: ";
    Printer<double>::stream(s, indent + "  ", v.orbit_radius);
    s << indent << "look_at: ";
    s << std::endl;
    Printer< ::ardvarc::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.look_at);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDVARC_MESSAGE_FLIGHTPLAN_H
